# Workflow for HMI Projekt.
# Author - Sagar Chande (CHN), Lorch Schweisstechnik GmbH
# This workflow contains a multiple jobs called "enforce-changelog", "release" and "doxygen"
# "enforce-changelog" job needs git event as "pull-request" to master
# "doxygen" job depends on succesful running of "release" job
# "doxygen" job uses Doxyfile in project ./HMI_Projekt/ path. There are three different doxyfiles "Doxyfile", "DoxyfileF7xx" and "DoxyfileH7xx"
# Please select the correct required doxyfile in doxyfile-path: variable in job doxygen. based on this selection documentation for different configurations (F7xx, H7xx) will be generated
# in default Doxyfile, documentation for F7xx configuration will be generated

name: HMI Workflow

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
 pull_request:
    branches: 
        - master
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

# Enforces the update of a changelog file on every pull request 
  enforce-changelog:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.4
    - id: read-version
      run: |
         echo "{version}={$(jq -r ".version" package.json)}" >> $GITHUB_OUTPUT
         echo "{tag}={v$(jq -r ".version" package.json)}" >> $GITHUB_OUTPUT           
    - id: changelog-enforcer
      uses: dangoslen/changelog-enforcer@v2
      with:
         skipLabels: "skip-changelog"
         changeLogPath: 'CHANGELOG.md'
         expectedLatestVersion: ${{ steps.read-version.outputs.tag }}
         missingUpdateErrorMessage: >
           Changelog Enforcer: No update to CHANGELOG.md found!
           Please read the Release.md (https://github.com/LorchAW/S4_M4/blob/master/docs/Release.md).

# enforce-changelog job is responsible to monitor the CHANGELOG.md file before pull-rquest to master
# Pull request will not be succeeded if CHANGELOG.md file is not changed/updated
# this job compares existing CHANGELOG.md file in master and CHANGELOG.md file in project structure which is about to pull in master
#  enforce-changelog:
#    if: github.event_name == 'push'
#    runs-on: ubuntu-latest
#    steps:
#    - name: changelogreader
#      uses: dangoslen/changelog-enforcer@v2
#      with:
#        changeLogPath: 'CHANGELOG.md'
#        skipLabels: 'Skip-Changelog'
#        missingUpdateErrorMessage: >
#          Changelog Enforcer: No update to CHANGELOG.md found!
#          Please read the Release.md (https://github.com/LorchAW/S4_M4/blob/master/docs/Release.md).



# release job is responsible to release a pre-release version/tag with name "latest"
# there are 4 steps in this Job
# Depending on pre-release / release version, two of them runs successfully each time this job is being called upon
# Other two runs with a warning that respective artifacts not found
# to decide pre-release/release version, CHANGELOG.md file has been read								 
# if "unrelease" tag in CHANGELOG.md and no "v" before version number, then pre-release version: for eg. ## unreleased
#																										 ## [1.0.0] - yyyy-mm-dd
#
# else "v" before version number without unreleased tag, it will be a release version:           for eg. ## [v1.0.0] - yyyy-mm-dd
  release:
   if: github.event_name == 'pull_request'
    # The type of runner that the job will run on
   runs-on: ubuntu-latest
   outputs: 
      upload_url: ${{ steps.create_release.outputs.upload_url }}
# Steps represent a sequence of tasks that will be executed as part of the job
   steps:
# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
   - name: checkout
     uses: actions/checkout@v2

# This action checks CHANGELOG.md for current version of project
# set environment variable for version tag name, and to identify version 
# starts With v ([v1.1.1]) or not ([1.1.1])

   - name: Get_version_Changelog
     id: Get_version_Changelog
     run: |
        [ -f CHANGELOG.md ] || ( echo "::error::File CHANGELOG.md not found!" && false )
        TAG_NAME=$(grep '##' CHANGELOG.md | head -n 1 | cut -d ' ' -f 2 )
        if [[ $TAG_NAME != *[{}\(\)\[\]]* ]]  
        then
          echo "::error::File CHANGELOG.md version without square bracket!" && false
        else
          TAG_NAME1=${TAG_NAME:1:-1}
          echo "TAG_NAME1: $TAG_NAME1"
          substr="Unreleased"
          Version=$(grep -m2 '##' CHANGELOG.md | awk '{for(i=1; i<=NF; i++) if($i~/##/) print $(i+1)}')
          echo $Version
          if [[ $Version == *"$substr"* ]];
          then
              UnrelCharcter=true
              FirstCharcter=${TAG_NAME1:0:1}
              echo "TAG_NAME1=v$TAG_NAME1" >> "$GITHUB_ENV"
          else
              UnrelCharcter=false
              echo "TAG_NAME1=$TAG_NAME1" >> "$GITHUB_ENV"
              FirstCharcter=${TAG_NAME1:0:1}
          fi
          echo "FirstCharcter: $FirstCharcter"
          echo "FirstCharcter=$FirstCharcter" >> "$GITHUB_ENV"
          echo "UnrelCharcter:$UnrelCharcter"
          echo "UnrelCharcter=$UnrelCharcter" >> "$GITHUB_ENV"          
        fi

# read changelog entry for version
   - name: read changelog entry for version
     id: changelog_reader
     if: ${{ env.FirstCharcter == 'v' && env.UnrelCharcter != 'true' }}
     uses: mindsers/changelog-reader-action@v2
     with:
#         version: "${{ steps.tag_name.outputs.current_version  steps.read-version.outputs.tag }}"
         path: ./CHANGELOG.md

# run a script for assert preparation
#   - name: script run 
#     if: ${{ steps.create_release.outputs.upload_url }}
#     run: |
#        chmod +x "${GITHUB_WORKSPACE}/.github/workflows/script.sh"
#        bash "${GITHUB_WORKSPACE}/.github/workflows/script.sh" ${GITHUB_WORKSPACE}

# create a new released version
   - name: Release
     id: create_release
     if: ${{ env.FirstCharcter == 'v' && env.UnrelCharcter != 'true' }}
     uses: actions/create-release@v1.1.4
     env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     with:
       tag_name: "${{ env.TAG_NAME1 }}"
       release_name: "${{ env.TAG_NAME1 }}"
       body: ${{ steps.changelog_reader.outputs.changes }} 
       draft: false
       prerelease: false


#delete the last pre release
   - name: Delete last Pre-Release
#     if: ( ! startsWith(github.event.ref, 'refs/tags/v'))
     if: ${{ env.FirstCharcter != 'v' && env.UnrelCharcter == 'true' }}
     uses: docker://antonyurchenko/git-release:latest
     env:
       RELEASE_NAME: "Latest"
       UNRELEASED: delete
     with:
       args: Asset/*.zip

# Delete the last "latest" release version tag (and not pre-released one) if exists
   - name: Delete tag latest
     if: ${{ env.FirstCharcter != 'v' && env.UnrelCharcter == 'true' }}
#     if: ( ! startsWith(github.event.ref, 'refs/tags/v'))
     run: (git tag -d latest && git push origin :refs/tags/latest) || true

# create a new pre-released version
   - name: Pre-Release
     if: ${{ env.FirstCharcter != 'v' && env.UnrelCharcter == 'true'}}
     uses: docker://antonyurchenko/git-release:latest
     env:
       RELEASE_NAME: "${{ env.TAG_NAME1 }}"
       UNRELEASED: "update"
#       UNRELEASED_TAG: "${{ env.TAG_NAME1 }}"
       PRE_RELEASE: "true"
       DRAFT_RELEASE: "false"
     with:
       args: Asset/*.zip

# upload file
   - name: Upload Release Asset
     id: upload-release-asset 
     if: ${{ steps.create_release.outputs.upload_url }}
     uses: actions/upload-release-asset@v1
     env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     with:
         upload_url: ${{ steps.create_release.outputs.upload_url }}
         asset_path: "./Asset/FW_HMI.zip"
         asset_name: FW_HMI.zip
         asset_content_type: application/tarzip


# doxygen job is responsible to generate documentation of HMI-Project and to store in a seperate branch gh-pages
# User can download gh-pages branch as zip folder and open index.html file to see the projct documentation
# there are four steps in this job - "check changelog" , Check project number, "Doxygen Action", and "deploy"
  doxygen:
   if: github.event_name == 'pull_request'
   runs-on: ubuntu-latest
   needs: release
   steps:
# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
   - name: checkout
     uses: actions/checkout@v2

# This action checks CHANGELOG.md for current version of project
# This version read from CHANGELOG.md file and added as predecessor to commit message 
# It makes easy to understand from which version and which commit the documentation is generated
   - name: check changelog
     id: check_changelog
     run: |
        [ -f CHANGELOG.md ] || ( echo "::error::File CHANGELOG.md not found!" && false )
        IMAGE_VERSION1=$(grep '##' CHANGELOG.md | head -n 1 | cut -d ' ' -f 2)
        echo "IMAGE_VERSION1: $IMAGE_VERSION1"
        vstr="v"
        if [[ $IMAGE_VERSION1 != *[{}\(\)\[\]]* ]]  
        then
          echo "::error::File CHANGELOG.md version without square bracket!" && false
        else
          IMAGE_VERSION2=${IMAGE_VERSION1:1:-1}
          echo "IMAGE_VERSION2: $IMAGE_VERSION2"
          FirstChar=${IMAGE_VERSION2:0:1}
          echo "FirstChar: $FirstChar"
          if [[ "$FirstChar" == "$vstr" ]] 
          then
              IMAGE_VERSION=${IMAGE_VERSION2:1}
              echo if$IMAGE_VERSION
           else
              IMAGE_VERSION=$IMAGE_VERSION2 
              echo else$IMAGE_VERSION             
          fi
        fi

        [[ "$IMAGE_VERSION" == $IMAGE_TAG ]] && exit 0
        reg_ex='^([0-9]+\.){2}(\*|[0-9]+)(-.*)?$'
        [[ $IMAGE_VERSION =~ $reg_ex ]] || ( echo "::error::First Version Tag in CHANGELOG.md not SemVer or 'latest'!" && false )
        echo "IMAGE_VERSION=v$IMAGE_VERSION" >> "$GITHUB_ENV"
        echo "env.IMAGE_VERSION: $IMAGE_VERSION"
        echo "::set-output name=image_version::${IMAGE_VERSION}"

# This action checks CHANGELOG.md for project number
# It adds this project number to PROJECT_NUMBER tag in doxyfile (in docker) and then use this project number to generate the documentation
# Project number extracted by this action can be seen in file index.html heading from web browser
   - name: Check project number
     run: |
        sed --in-place -r "s/^.*(PROJECT_NUMBER[ ]*=).*/\1 \"$IMAGE_VERSION\"/g" ./HMI_Projekt/Doxyfile

# state hier the doxyfile path from your repository
# This action generated the documentation depending on your doxyfile settings (see main.yml comment at the satrt of this file)
   - name: Doxygen Action
     uses: mattnotmitt/doxygen-action@v1.1.0
     with:
       # Path to Doxyfile
       doxyfile-path: "./HMI_Projekt/Doxyfile" # default is ./Doxyfile
       # Working directory
       working-directory: '.' # default is .

# This action deploy the generated documentation from "html" folder in a seperate branch gh-pages on the github.
# It also appends the version number which read in previous step from CHANGELOG.md file and commit message to the complete commit
   - name: Deploy
     uses: peaceiris/actions-gh-pages@v3
     with:
      github_token: ${{ secrets.GITHUB_TOKEN  }}
      # Default Doxyfile build documentation to html directory. 
      # Change the directory if changes in Doxyfile
      publish_dir: ./html
      commit_message: '${{ steps.check_changelog.outputs.image_version}} ${{github.event.head_commit.message}}'
