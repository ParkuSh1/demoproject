# Workflow for HMI Projekt.
# Author - Sagar Chande (CHN), Lorch Schweisstechnik GmbH
# This workflow contains a multiple jobs called "enforce-changelog", "release" and "doxygen"
# "enforce-changelog" job needs git event as "pull-request" to master
# "doxygen" job depends on succesful running of "release" job
# "doxygen" job uses Doxyfile in project ./HMI_Projekt/ path. There are three different doxyfiles "Doxyfile", "DoxyfileF7xx" and "DoxyfileH7xx"
# Please select the correct required doxyfile in doxyfile-path: variable in job doxygen. based on this selection documentation for different configurations (F7xx, H7xx) will be generated
# in default Doxyfile, documentation for F7xx configuration will be generated

name: HMI Workflow

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: 
        - UpdateReleaseTag
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

# release job is responsible to release a pre-release version/tag with name "latest"
# there are 4 steps in this Job
# Depending on pre-release / release version, two of them runs successfully each time this job is being called upon
# Other two runs with a warning that respective artifacts not found
# to decide pre-release/release version, CHANGELOG.md file has been read								 
# if "unrelease" tag in CHANGELOG.md and no "v" before version number, then pre-release version: for eg. ## unreleased
#																										 ## [1.0.0] - yyyy-mm-dd
#
# else "v" before version number without unreleased tag, it will be a release version:           for eg. ## [v1.0.0] - yyyy-mm-dd
  release:
   if: github.event_name == 'push'
    # The type of runner that the job will run on
   runs-on: ubuntu-latest
# Steps represent a sequence of tasks that will be executed as part of the job
   steps:
# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
   - name: checkout
     uses: actions/checkout@v2

# run a bash script
   - name: run a script to extract version
     run: |
         chmod +x "${GITHUB_WORKSPACE}/.github/workflows/script.sh"
         bash "${GITHUB_WORKSPACE}/.github/workflows/script.sh" ${GITHUB_WORKSPACE} ChangeLogVersion 

# retrieve version
   - name: Retrieve version
     env:
       ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
     run: |
          echo "::set-env name=TAG_NAME::$(grep -m1 '##' "${GITHUB_WORKSPACE}/CHANGELOG.md" | awk '{for(i=1; i<=NF; i++) if($i~/##/) print $(i+1)}')"

# create a new pre-released version
   - name: Pre-Release
     if: (  startsWith(github.ref, 'refs/tags/v') )
     uses: docker://antonyurchenko/git-release:latest
     env:
       RELEASE_NAME: "${{ env.TAG_NAME }}"
       PRE_RELEASE: false
       DRAFT_RELEASE: false
     with:
       args: download/*.zip

# create a new pre-released version
   - name: Pre-Release
     if: ( ! startsWith(github.ref, 'refs/tags/v') )
     uses: docker://antonyurchenko/git-release:latest
     env:
       UNRELEASED: update
       PRE_RELEASE: true
       DRAFT_RELEASE: false
     with:
       args: download/*.zip

# doxygen job is responsible to generate documentation of HMI-Project and to store in a seperate branch gh-pages
# User can download gh-pages branch as zip folder and open index.html file to see the projct documentation
# there are four steps in this job - "check changelog" , Check project number, "Doxygen Action", and "deploy"
  doxygen:
   if: github.event_name == 'push'
   runs-on: ubuntu-latest
   needs: release
   steps:
# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
   - name: checkout
     uses: actions/checkout@v2

# This action checks CHANGELOG.md for current version of project
# This version read from CHANGELOG.md file and added as predecessor to commit message 
# It makes easy to understand from which version and which commit the documentation is generated
   - name: check changelog
     id: check_changelog
     run: |
        [ -f CHANGELOG.md ] || ( echo "::error::File CHANGELOG.md not found!" && false )
        IMAGE_VERSION=$(grep '##' CHANGELOG.md | head -n 1 | cut -d ' ' -f 2)
        echo "IMAGE_VERSION: $IMAGE_VERSION"
        [[ "$IMAGE_VERSION" == $IMAGE_TAG ]] && exit 0
        reg_ex='^([0-9]+\.){2}(\*|[0-9]+)(-.*)?$'
        [[ $IMAGE_VERSION =~ $reg_ex ]] || ( echo "::error::First Version Tag in CHANGELOG.md not SemVer or 'latest'!" && false )
        echo "IMAGE_VERSION=v$IMAGE_VERSION" >> "$GITHUB_ENV"
        echo "env.IMAGE_VERSION: $IMAGE_VERSION"
        echo "::set-output name=image_version::${IMAGE_VERSION}"

# This action checks CHANGELOG.md for project number.
# It adds this project number to PROJECT_NUMBER tag in doxyfile (in docker) and then use this project number to generate the documentation
# Project number extracted by this action can be seen in file index.html heading from web browser
   - name: Check project number
     run: |
        sed --in-place -r "s/^.*(PROJECT_NUMBER[ ]*=).*/\1 \"$IMAGE_VERSION\"/g" ./HMI_Projekt/Doxyfile

# state hier the doxyfile path from your repository
# This action generated the documentation depending on your doxyfile settings (see main.yml comment at the satrt of this file)
   - name: Doxygen Action
     uses: mattnotmitt/doxygen-action@v1.1.0
     with:
       # Path to Doxyfile
       doxyfile-path: "./HMI_Projekt/Doxyfile" # default is ./Doxyfile
       # Working directory
       working-directory: '.' # default is .

# This action deploy the generated documentation from "html" folder in a seperate branch gh-pages on the github.
# It also appends the version number which read in previous step from CHANGELOG.md file and commit message to the complete commit
   - name: Deploy
     uses: peaceiris/actions-gh-pages@v3
     with:
      github_token: ${{ secrets.GITHUB_TOKEN  }}
      # Default Doxyfile build documentation to html directory. 
      # Change the directory if changes in Doxyfile
      publish_dir: ./html
      commit_message: '${{ steps.check_changelog.outputs.image_version}} ${{github.event.head_commit.message}}'
